generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  firebase_uid    String?          @unique(map: "firebase_uid") @map("firebase_uid") @db.VarChar(255)
  email           String?          @unique(map: "email") @db.VarChar(255)
  name            String?          @db.VarChar(255)
  avatar          String?          @db.Text
  created_at      DateTime?        @default(now()) @map("created_at") @db.Timestamp(0)
  updated_at      DateTime?        @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  role            String?          @db.VarChar(255)
  role_id         Int?             @map("role_id")
  is_active       Boolean?         @default(true) @map("is_active")
  last_login      DateTime?        @map("last_login") @db.Timestamp(0)
  login_attempts  Int?             @default(0) @map("login_attempts")
  locked_until    DateTime?        @map("locked_until") @db.Timestamp(0)
  
  // Relaciones
  auditLogs       AuditLog[]
  jwtTokens       JwtToken[]
  passwordChanges PasswordChange[]
  userPermissions UserPermission[]
  userSessions    UserSession[]
  roles           Roles?           @relation(fields: [role_id], references: [id])

  @@map("users")
}

model Roles {
  id          Int                @id @default(autoincrement())
  name        String             @unique(map: "name") @db.VarChar(50)
  description String?            @db.Text
  level       Int?               @default(1)
  is_active   Boolean?           @default(true) @map("is_active")
  created_at  DateTime?          @default(now()) @map("created_at") @db.Timestamp(0)
  updated_at  DateTime?          @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  
  // Relaciones
  users               User[]
  role_permissions    RolePermissions[]
  role_config         RoleConfig[]

  @@map("roles")
}

model RolePermissions {
  id           Int      @id @default(autoincrement())
  role_id      Int      @map("role_id")
  module       String   @db.VarChar(100)
  can_read     Boolean  @default(false) @map("can_read")
  can_create   Boolean  @default(false) @map("can_create")
  can_update   Boolean  @default(false) @map("can_update")
  can_delete   Boolean  @default(false) @map("can_delete")
  can_export  Boolean  @default(false) @map("can_export")
  can_approve Boolean  @default(false) @map("can_approve")
  created_at   DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updated_at   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  
  // Relaciones
  roles Roles @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@unique([role_id, module])
  @@map("role_permissions")
}

model SystemModules {
  id                Int      @id @default(autoincrement())
  name              String   @unique @db.VarChar(100)
  display_name      String   @map("display_name") @db.VarChar(255)
  description       String?  @db.Text
  icon              String?  @db.VarChar(100)
  route             String?  @db.VarChar(255)
  is_active         Boolean  @default(true) @map("is_active")
  requires_approval Boolean  @default(false) @map("requires_approval")
  created_at        DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updated_at        DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)

  @@map("system_modules")
}

model RoleConfig {
  id           Int      @id @default(autoincrement())
  config_key   String   @unique @map("config_key") @db.VarChar(100)
  config_value String?  @map("config_value") @db.Text
  description  String?  @db.Text
  role_id      Int?     @map("role_id")
  created_at   DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updated_at   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  
  // Relaciones
  roles Roles? @relation(fields: [role_id], references: [id], onDelete: SetNull)

  @@map("role_config")
}

model Client {
  id           Int            @id @default(autoincrement())
  run_cliente  String?        @unique(map: "run_cliente") @db.VarChar(50)
  nombre       String?        @db.VarChar(255)
  rfc          String?        @db.VarChar(50)
  
  // Información geográfica
  pais         String?        @db.VarChar(100)
  estado       String?        @db.VarChar(100)
  ciudad       String?        @db.VarChar(100)
  direccion    String?        @db.Text
  
  // Información de contacto
  telefono     String?        @db.VarChar(20)
  email        String?        @db.VarChar(255)
  
  // Campos de auditoría
  created_at   DateTime?      @default(now()) @map("created_at") @db.Timestamp(0)
  updated_at   DateTime?      @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  
  // Relaciones
  projects     Project[]
  recuperacion recuperacion[]

  @@map("clients")
}

model Project {
  id                 Int            @id @default(autoincrement())
  nombre             String?        @db.VarChar(255)
  cliente_id         Int?           @map("cliente_id")
  monto_sin_iva      Decimal?       @db.Decimal(10, 2)
  monto_con_iva      Decimal?       @db.Decimal(10, 2)
  created_at         DateTime?      @default(now()) @map("created_at") @db.Timestamp(0)
  updated_at         DateTime?      @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  phase_id           Int?
  cuentas_por_cobrar CuentaCobrar[]
  projectCosts       ProjectCost[]
  phases             Phase?         @relation(fields: [phase_id], references: [id], onUpdate: NoAction, map: "fk_project_phase")
  client             Client?        @relation(fields: [cliente_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "projects_ibfk_1")
  recuperacion       recuperacion[]

  @@index([cliente_id], map: "cliente_id")
  @@index([phase_id], map: "fk_project_phase")
  @@map("projects")
}

model Provider {
  id              Int           @id @default(autoincrement())
  run_proveedor   String?       @unique(map: "run_proveedor") @db.VarChar(50)
  nombre          String?       @db.VarChar(255)
  direccion       String?       @db.Text
  elemento        String        @db.VarChar(255)
  datos_bancarios String        @db.VarChar(255)
  contacto        String        @db.VarChar(255)
  created_at      DateTime?     @default(now()) @map("created_at") @db.Timestamp(0)
  updated_at      DateTime?     @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  cuentasPagar    clear
  CuentaPagar[]

  @@map("proveedores")
}

model CuentaPagar {
  id                  Int       @id @default(autoincrement())
  concepto            String?   @db.VarChar(255)
  monto_neto          Decimal?  @db.Decimal(10, 2)
  monto_con_iva       Decimal?  @db.Decimal(10, 2)
  categoria           String?   @db.VarChar(255)
  proveedor_id        Int?      @map("proveedor_id")
  fecha               DateTime? @db.Date
  pagado              Boolean?  @default(false)
  created_at          DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updated_at          DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  autorizado          Boolean?  @default(false)
  requiere_iva        Boolean?  @default(false)
  pagos_parciales     Decimal?  @default(0.00) @db.Decimal(10, 2)
  monto_transferencia Decimal?  @default(0.00) @db.Decimal(10, 2)
  monto_efectivo      Decimal?  @default(0.00) @db.Decimal(10, 2)
  provider            Provider? @relation(fields: [proveedor_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "cuentas_por_pagar_ibfk_1")

  @@index([proveedor_id], map: "proveedor_id")
  @@map("cuentas_por_pagar")
}

model CuentaCobrar {
  id                Int                 @id @default(autoincrement())
  proyecto_id       Int?
  concepto          String?             @db.VarChar(255)
  monto_sin_iva     Decimal?            @db.Decimal(10, 2)
  monto_con_iva     Decimal?            @db.Decimal(10, 2)
  fecha             DateTime?           @db.Date
  created_at        DateTime?           @default(now()) @map("created_at") @db.Timestamp(0)
  updated_at        DateTime?           @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  complementos_pago complementos_pago[]
  projects          Project?            @relation(fields: [proyecto_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "cuentas_por_cobrar_ibfk_1")

  @@index([proyecto_id], map: "proyecto_id")
  @@map("cuentas_por_cobrar")
}

model Contabilidad {
  id         Int       @id @default(autoincrement())
  fecha      DateTime? @db.Date
  concepto   String?   @db.VarChar(255)
  monto      Decimal?  @db.Decimal(10, 2)
  cargo      Decimal?  @default(0.00) @db.Decimal(15, 2)
  abono      Decimal?  @default(0.00) @db.Decimal(15, 2)
  saldo      Decimal?  @default(0.00) @db.Decimal(15, 2)
  status     String?   @default("Incompleto") @db.VarChar(50)
  notas      String?   @db.Text
  created_at DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updated_at DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  tipo       String?   @db.VarChar(50)
  facturaPDF String?   @db.VarChar(255)
  facturaXML String?   @db.VarChar(255)

  @@map("contabilidad")
}

model Categoria {
  id         Int       @id @default(autoincrement())
  nombre     String?   @unique(map: "nombre") @db.VarChar(255)
  created_at DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updated_at DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)

  @@map("categorias")
}

model Phase {
  id          Int       @id @default(autoincrement())
  nombre      String    @db.VarChar(255)
  descripcion String?   @db.Text
  created_at  DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  projects    Project[]

  @@map("phases")
}

model CostoFijo {
  id             Int       @id @default(autoincrement())
  colaborador    String    @db.VarChar(255)
  puesto         String    @db.VarChar(255)
  monto_usd      Decimal   @db.Decimal(10, 2)
  monto_mxn      Decimal   @db.Decimal(10, 2)
  impuestos_imss Decimal   @db.Decimal(10, 2)
  comentarios    String?   @db.Text
  created_at     DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updated_at     DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  fecha          DateTime? @db.Date
  cuenta_creada  Boolean   @default(false)

  @@map("costos_fijos")
}

model Cotizacion {
  id            Int                  @id @default(autoincrement())
  cliente       String               @db.VarChar(255)
  proyecto      String               @db.VarChar(255)
  monto_neto    Decimal              @db.Decimal(10, 2)
  monto_con_iva Decimal              @db.Decimal(10, 2)
  descripcion   String?              @db.Text
  documento     String?              @db.VarChar(255)
  estado        cotizaciones_estado? @default(No_creada)
  created_at    DateTime?            @default(now()) @map("created_at") @db.Timestamp(0)
  updated_at    DateTime?            @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)

  @@map("cotizaciones")
}

model ProjectCost {
  id         Int       @id @default(autoincrement())
  project_id Int       @map("project_id")
  concepto   String    @db.VarChar(255)
  factura    String?   @db.VarChar(255)
  monto      Decimal   @db.Decimal(10, 2)
  created_at DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  project    Project   @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "project_costs_ibfk_1")

  @@index([project_id], map: "project_id")
  @@map("project_costs")
}

model complementos_pago {
  id                 Int          @id @default(autoincrement())
  cuenta_id          Int
  fecha_pago         DateTime     @db.Date
  concepto           String       @db.VarChar(255)
  monto_sin_iva      Decimal      @db.Decimal(15, 2)
  monto_con_iva      Decimal      @db.Decimal(15, 2)
  created_at         DateTime?    @default(now()) @db.Timestamp(0)
  updated_at         DateTime?    @default(now()) @db.Timestamp(0)
  cuentas_por_cobrar CuentaCobrar @relation(fields: [cuenta_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "complementos_pago_ibfk_1")

  @@index([cuenta_id], map: "cuenta_id")
}

model emitidas {
  id               Int       @id @default(autoincrement())
  rfcReceptor      String    @db.VarChar(50)
  razonSocial      String    @db.VarChar(255)
  fechaEmision     DateTime  @db.Date
  subtotal         Decimal   @db.Decimal(10, 2)
  iva              Decimal   @db.Decimal(10, 2)
  total            Decimal   @db.Decimal(10, 2)
  claveSat         String    @db.VarChar(50)
  descripcion      String?   @db.Text
  facturaAdmon     Boolean?  @default(false)
  pue              Boolean?  @default(false)
  ppd              Boolean?  @default(false)
  pagos            Json?
  facturasPDF      Json?
  facturasXML      Json?
  comprobantesPago Json?
  complementosPDF  Json?
  complementosXML  Json?
  created_at       DateTime? @default(now()) @db.DateTime(0)
  updated_at       DateTime? @db.DateTime(0)
}

model flow_recovery_v2 {
  id          Int       @id @default(autoincrement())
  concepto    String    @db.VarChar(255)
  monto       Decimal   @db.Decimal(10, 2)
  fecha       DateTime  @db.Date
  cliente_id  Int?
  proyecto_id Int?
  categoria   String?   @db.VarChar(100)
  recuperado  Boolean?  @default(false)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
}

model permisos {
  id                   Int       @id @default(autoincrement())
  modulo               String    @db.VarChar(255)
  acceso_administrador Boolean
  created_at           DateTime? @default(now()) @db.Timestamp(0)
  updated_at           DateTime? @default(now()) @db.Timestamp(0)
}

model recuperacion {
  id          Int       @id @default(autoincrement())
  concepto    String?   @db.VarChar(255)
  monto       Decimal?  @db.Decimal(10, 2)
  fecha       DateTime? @db.Date
  cliente_id  Int?
  proyecto_id Int?
  categoria   String?   @db.VarChar(255)
  created_at  DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  recuperado  Boolean?  @default(false)
  clients     Client?   @relation(fields: [cliente_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "recuperacion_ibfk_1")
  projects    Project?  @relation(fields: [proyecto_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "recuperacion_ibfk_2")

  @@index([cliente_id], map: "cliente_id")
  @@index([proyecto_id], map: "proyecto_id")
}

model requisiciones {
  id                   Int       @id @default(autoincrement())
  concepto             String    @db.VarChar(255)
  solicitante          String    @db.VarChar(255)
  justificacion        String?   @db.Text
  area                 String?   @db.VarChar(255)
  fecha_requerida      DateTime? @db.Date
  costos               Decimal?  @db.Decimal(10, 2)
  link_cotizaciones    String?   @db.VarChar(255)
  aceptacion_gerente   Boolean?  @default(false)
  aceptacion_direccion Boolean?  @default(false)
  created_at           DateTime? @default(now()) @db.Timestamp(0)
  updated_at           DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  user_id    Int?     @map("user_id")
  user_email String?  @map("user_email")
  action     String
  table_name String?  @map("table_name")
  record_id  Int?     @map("record_id")
  old_data   Json?    @map("old_data")
  new_data   Json?    @map("new_data")
  ip_address String?  @map("ip_address")
  user_agent String?  @map("user_agent")
  details    Json?
  created_at DateTime @default(now()) @map("created_at")
  user       User?    @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@index([action])
  @@index([table_name])
  @@index([record_id])
  @@index([created_at])
  @@index([ip_address])
  @@map("audit_logs")
}

model JwtToken {
  id         Int      @id @default(autoincrement())
  user_id    Int      @map("user_id")
  token_hash String   @map("token_hash")
  expires_at DateTime @map("expires_at")
  is_revoked Boolean  @default(false) @map("is_revoked")
  created_at DateTime @default(now()) @map("created_at")
  user       User     @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@index([token_hash])
  @@index([expires_at])
  @@index([is_revoked])
  @@map("jwt_tokens")
}

model UserSession {
  id            Int      @id @default(autoincrement())
  user_id       Int      @map("user_id")
  session_id    String   @unique @map("session_id")
  ip_address    String?  @map("ip_address")
  user_agent    String?  @map("user_agent")
  last_activity DateTime @default(now()) @updatedAt @map("last_activity")
  expires_at    DateTime @map("expires_at")
  is_active     Boolean  @default(true) @map("is_active")
  created_at    DateTime @default(now()) @map("created_at")
  user          User     @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@index([session_id])
  @@index([expires_at])
  @@index([is_active])
  @@map("user_sessions")
}

model FailedLoginAttempt {
  id            Int       @id @default(autoincrement())
  email         String
  ip_address    String    @map("ip_address")
  user_agent    String?   @map("user_agent")
  attempt_count Int       @default(1) @map("attempt_count")
  first_attempt DateTime  @default(now()) @map("first_attempt")
  last_attempt  DateTime  @default(now()) @updatedAt @map("last_attempt")
  is_blocked    Boolean   @default(false) @map("is_blocked")
  blocked_until DateTime? @map("blocked_until")

  @@index([email])
  @@index([ip_address])
  @@index([is_blocked])
  @@index([last_attempt])
  @@map("failed_login_attempts")
}

model PasswordChange {
  id          Int      @id @default(autoincrement())
  user_id     Int      @map("user_id")
  changed_by  String?  @map("changed_by")
  ip_address  String?  @map("ip_address")
  user_agent  String?  @map("user_agent")
  change_type String   @map("change_type")
  created_at  DateTime @default(now()) @map("created_at")
  userId      Int?
  User        User?    @relation(fields: [userId], references: [id])

  @@index([user_id])
  @@index([change_type])
  @@index([created_at])
  @@index([userId], map: "password_changes_userId_fkey")
  @@map("password_changes")
}

model UserPermission {
  id         Int       @id @default(autoincrement())
  user_id    Int       @map("user_id")
  resource   String
  action     String
  granted    Boolean   @default(true)
  granted_by String?   @map("granted_by")
  granted_at DateTime  @default(now()) @map("granted_at")
  expires_at DateTime? @map("expires_at")
  userId     Int?
  User       User?    @relation(fields: [userId], references: [id])

  @@unique([user_id, resource, action])
  @@index([user_id])
  @@index([resource])
  @@index([action])
  @@index([expires_at])
  @@index([userId], map: "user_permissions_userId_fkey")
  @@map("user_permissions")
}

model SecurityLog {
  id         Int      @id @default(autoincrement())
  event_type String   @map("event_type")
  severity   String   @default("MEDIUM")
  user_id    Int?     @map("user_id")
  ip_address String?  @map("ip_address")
  user_agent String?  @map("user_agent")
  details    Json?
  created_at DateTime @default(now()) @map("created_at")

  @@index([event_type])
  @@index([severity])
  @@index([user_id])
  @@index([created_at])
  @@map("security_logs")
}

model SecurityConfig {
  id           Int      @id @default(autoincrement())
  config_key   String   @unique @map("config_key")
  config_value String?  @map("config_value")
  description  String?
  updated_by   String?  @map("updated_by")
  updated_at   DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([config_key])
  @@map("security_config")
}

model BackupMetadata {
  id                 Int       @id @default(autoincrement())
  backup_filename    String    @map("backup_filename")
  backup_path        String    @map("backup_path")
  backup_size        BigInt?   @map("backup_size")
  backup_type        String    @default("FULL") @map("backup_type")
  compression_type   String?   @map("compression_type")
  encryption_enabled Boolean   @default(false) @map("encryption_enabled")
  created_by         String?   @map("created_by")
  created_at         DateTime  @default(now()) @map("created_at")
  expires_at         DateTime? @map("expires_at")
  is_valid           Boolean   @default(true) @map("is_valid")

  @@index([backup_filename])
  @@index([backup_type])
  @@index([created_at])
  @@index([expires_at])
  @@index([is_valid])
  @@map("backup_metadata")
}

model PerformanceIndex {
  id            Int      @id @default(autoincrement())
  table_name    String   @map("table_name")
  index_name    String   @map("index_name")
  index_columns String   @map("index_columns")
  index_type    String   @default("INDEX") @map("index_type")
  is_active     Boolean  @default(true) @map("is_active")
  created_at    DateTime @default(now()) @map("created_at")

  @@unique([table_name, index_name])
  @@index([table_name])
  @@index([is_active])
  @@map("performance_indexes")
}

enum cotizaciones_estado {
  No_creada                @map("No creada")
  En_proceso_de_aceptaci_n @map("En proceso de aceptación")
  Aceptada_por_cliente     @map("Aceptada por cliente")
  No_aceptada              @map("No aceptada")
}
