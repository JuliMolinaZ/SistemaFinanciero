const fs = require('fs');
const readline = require('readline');
const { verifyConnection, sendTestEmail } = require('./src/services/emailService');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

async function configureGmail() {
  console.log('üöÄ CONFIGURACI√ìN DE GMAIL PARA RUNSOLUTIONS');
  console.log('=============================================\n');
  
  try {
    // 1. Solicitar email de Gmail
    const gmailUser = await question('üìß Ingresa tu email de Gmail: ');
    
    if (!gmailUser.includes('@gmail.com')) {
      console.log('‚ùå Error: Debe ser un email de Gmail v√°lido');
      rl.close();
      return;
    }
    
    console.log('\nüìã INSTRUCCIONES PARA GENERAR CONTRASE√ëA DE APLICACI√ìN:');
    console.log('1. Ve a tu cuenta de Gmail');
    console.log('2. Activa la verificaci√≥n en 2 pasos (si no est√° activada)');
    console.log('3. Ve a "Contrase√±as de aplicaci√≥n"');
    console.log('4. Selecciona "Correo" como aplicaci√≥n');
    console.log('5. Copia la contrase√±a generada (16 caracteres)\n');
    
    // 2. Solicitar contrase√±a de aplicaci√≥n
    const appPassword = await question('üîë Ingresa la contrase√±a de aplicaci√≥n de Gmail: ');
    
    if (appPassword.length !== 16) {
      console.log('‚ö†Ô∏è  Advertencia: La contrase√±a de aplicaci√≥n debe tener 16 caracteres');
      console.log('   ¬øEst√°s seguro de que quieres continuar? (s/n)');
      const confirm = await question('   Respuesta: ');
      if (confirm.toLowerCase() !== 's' && confirm.toLowerCase() !== 'si') {
        console.log('‚ùå Configuraci√≥n cancelada');
        rl.close();
        return;
      }
    }
    
    // 3. Actualizar archivo de configuraci√≥n
    console.log('\nüîß Actualizando archivo de configuraci√≥n...');
    
    let configContent = fs.readFileSync('config.env', 'utf8');
    
    // Reemplazar variables
    configContent = configContent.replace(
      /GMAIL_USER=.*/g,
      `GMAIL_USER=${gmailUser}`
    );
    
    configContent = configContent.replace(
      /GMAIL_APP_PASSWORD=.*/g,
      `GMAIL_APP_PASSWORD=${appPassword}`
    );
    
    fs.writeFileSync('config.env', configContent);
    
    console.log('‚úÖ Archivo de configuraci√≥n actualizado');
    
    // 4. Probar conexi√≥n
    console.log('\nüß™ Probando conexi√≥n con Gmail...');
    
    // Establecer variables de entorno temporalmente
    process.env.GMAIL_USER = gmailUser;
    process.env.GMAIL_APP_PASSWORD = appPassword;
    
    const connectionOk = await verifyConnection();
    
    if (connectionOk) {
      console.log('‚úÖ Conexi√≥n exitosa con Gmail');
      
      // 5. Enviar email de prueba
      console.log('\nüìß Enviando email de prueba...');
      
      try {
        const result = await sendTestEmail(gmailUser);
        
        if (result.success) {
          console.log('‚úÖ Email de prueba enviado exitosamente');
          console.log('   Message ID:', result.messageId);
          console.log('   Revisa tu bandeja de entrada en:', gmailUser);
        }
      } catch (emailError) {
        console.log('‚ö†Ô∏è  No se pudo enviar email de prueba:', emailError.message);
      }
      
    } else {
      console.log('‚ùå No se pudo conectar con Gmail');
      console.log('üí° Verifica:');
      console.log('   - Que la verificaci√≥n en 2 pasos est√© activada');
      console.log('   - Que la contrase√±a de aplicaci√≥n sea correcta');
      console.log('   - Que no haya bloqueos de seguridad en tu cuenta');
    }
    
    // 6. Mostrar resumen
    console.log('\nüìä RESUMEN DE CONFIGURACI√ìN:');
    console.log('   Email configurado:', gmailUser);
    console.log('   Contrase√±a de app:', appPassword ? '‚úÖ Configurada' : '‚ùå No configurada');
    console.log('   Conexi√≥n Gmail:', connectionOk ? '‚úÖ Exitosa' : '‚ùå Fallida');
    
    if (connectionOk) {
      console.log('\nüéâ ¬°Configuraci√≥n completada exitosamente!');
      console.log('   Ahora puedes registrar usuarios y se enviar√°n emails autom√°ticamente');
    } else {
      console.log('\n‚ö†Ô∏è  Configuraci√≥n incompleta');
      console.log('   Revisa los errores y vuelve a ejecutar el script');
    }
    
  } catch (error) {
    console.error('‚ùå Error durante la configuraci√≥n:', error.message);
  } finally {
    rl.close();
  }
}

function question(query) {
  return new Promise((resolve) => {
    rl.question(query, resolve);
  });
}

// Ejecutar la funci√≥n
configureGmail();
