const { PrismaClient } = require('@prisma/client');
require('dotenv').config({ path: './config.env' });

console.log('üîç DIAGN√ìSTICO DE BASE DE DATOS');
console.log('================================\n');

// Verificar variables de entorno
console.log('üìã Verificando variables de entorno...');
console.log('=====================================');
console.log('DATABASE_URL:', process.env.DATABASE_URL ? '‚úÖ Configurada' : '‚ùå No configurada');
console.log('DB_HOST:', process.env.DB_HOST ? '‚úÖ Configurada' : '‚ùå No configurada');
console.log('DB_USER:', process.env.DB_USER ? '‚úÖ Configurada' : '‚ùå No configurada');
console.log('DB_NAME:', process.env.DB_NAME ? '‚úÖ Configurada' : '‚ùå No configurada');
console.log('DB_PORT:', process.env.DB_PORT ? '‚úÖ Configurada' : '‚ùå No configurada');

// Verificar archivo .env
console.log('\nüìã Verificando archivo .env...');
console.log('==============================');
try {
  const fs = require('fs');
  const envPath = './config.env';
  if (fs.existsSync(envPath)) {
    console.log('‚úÖ Archivo config.env existe');
    const envContent = fs.readFileSync(envPath, 'utf8');
    const lines = envContent.split('\n').filter(line => line.trim() && !line.startsWith('#'));
    console.log(`   - ${lines.length} variables de entorno encontradas`);
  } else {
    console.log('‚ùå Archivo config.env NO existe');
  }
} catch (error) {
  console.log('‚ùå Error leyendo archivo .env:', error.message);
}

// Verificar Prisma
console.log('\nüìã Verificando Prisma...');
console.log('=========================');
try {
  const { PrismaClient } = require('@prisma/client');
  console.log('‚úÖ Prisma Client importado correctamente');
  
  // Verificar esquema
  const fs = require('fs');
  const schemaPath = './prisma/schema.prisma';
  if (fs.existsSync(schemaPath)) {
    console.log('‚úÖ Archivo schema.prisma existe');
    const schemaContent = fs.readFileSync(schemaPath, 'utf8');
    if (schemaContent.includes('model User')) {
      console.log('‚úÖ Modelo User encontrado en el esquema');
    } else {
      console.log('‚ùå Modelo User NO encontrado en el esquema');
    }
    if (schemaContent.includes('model Roles')) {
      console.log('‚úÖ Modelo Roles encontrado en el esquema');
    } else {
      console.log('‚ùå Modelo Roles NO encontrado en el esquema');
    }
  } else {
    console.log('‚ùå Archivo schema.prisma NO existe');
  }
} catch (error) {
  console.log('‚ùå Error con Prisma:', error.message);
}

// Verificar conexi√≥n a la base de datos
console.log('\nüìã Verificando conexi√≥n a la base de datos...');
console.log('=============================================');

async function testConnection() {
  const prisma = new PrismaClient();
  
  try {
    console.log('üîÑ Intentando conectar...');
    await prisma.$connect();
    console.log('‚úÖ Conexi√≥n establecida exitosamente');
    
    // Probar consulta simple
    console.log('üîÑ Probando consulta simple...');
    const result = await prisma.$queryRaw`SELECT 1 as test`;
    console.log('‚úÖ Consulta simple exitosa:', result);
    
    // Verificar si las tablas existen
    console.log('üîÑ Verificando existencia de tablas...');
    const tables = await prisma.$queryRaw`
      SELECT TABLE_NAME 
      FROM INFORMATION_SCHEMA.TABLES 
      WHERE TABLE_SCHEMA = DATABASE()
      AND TABLE_NAME IN ('users', 'roles', 'role_permissions', 'system_modules')
      ORDER BY TABLE_NAME
    `;
    
    console.log('‚úÖ Tablas encontradas:');
    tables.forEach(table => {
      console.log(`   - ${table.TABLE_NAME}`);
    });
    
    // Contar usuarios
    console.log('üîÑ Contando usuarios...');
    const userCount = await prisma.$queryRaw`SELECT COUNT(*) as count FROM users`;
    console.log(`‚úÖ Total de usuarios: ${userCount[0].count}`);
    
    // Contar roles
    console.log('üîÑ Contando roles...');
    const roleCount = await prisma.$queryRaw`SELECT COUNT(*) as count FROM roles`;
    console.log(`‚úÖ Total de roles: ${roleCount[0].count}`);
    
  } catch (error) {
    console.log('‚ùå Error de conexi√≥n:', error.message);
    console.log('   Stack trace:', error.stack);
  } finally {
    try {
      await prisma.$disconnect();
      console.log('‚úÖ Conexi√≥n cerrada');
    } catch (error) {
      console.log('‚ö†Ô∏è Error cerrando conexi√≥n:', error.message);
    }
  }
}

// Ejecutar diagn√≥stico
testConnection()
  .then(() => {
    console.log('\nüèÅ DIAGN√ìSTICO COMPLETADO');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n‚ùå ERROR EN DIAGN√ìSTICO:', error);
    process.exit(1);
  });
